// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: tss.proto

package tss

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TssServiceClient is the client API for TssService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TssServiceClient interface {
	GetLocalPartyId(ctx context.Context, in *GetLocalPartyIdRequest, opts ...grpc.CallOption) (*GetLocalPartyIdResponse, error)
	GetKey(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (*GetKeyResponse, error)
	KeyGen(ctx context.Context, in *KeyGenRequest, opts ...grpc.CallOption) (*KeyGenResponse, error)
	KeySign(ctx context.Context, in *KeySignRequest, opts ...grpc.CallOption) (*KeySignResponse, error)
	KeyDelete(ctx context.Context, in *KeyDeleteRequest, opts ...grpc.CallOption) (*KeyDeleteResponse, error)
	VerifySignature(ctx context.Context, in *VerifySignatureRequest, opts ...grpc.CallOption) (*VerifySignatureResponse, error)
}

type tssServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTssServiceClient(cc grpc.ClientConnInterface) TssServiceClient {
	return &tssServiceClient{cc}
}

func (c *tssServiceClient) GetLocalPartyId(ctx context.Context, in *GetLocalPartyIdRequest, opts ...grpc.CallOption) (*GetLocalPartyIdResponse, error) {
	out := new(GetLocalPartyIdResponse)
	err := c.cc.Invoke(ctx, "/tss.TssService/GetLocalPartyId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tssServiceClient) GetKey(ctx context.Context, in *GetKeyRequest, opts ...grpc.CallOption) (*GetKeyResponse, error) {
	out := new(GetKeyResponse)
	err := c.cc.Invoke(ctx, "/tss.TssService/GetKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tssServiceClient) KeyGen(ctx context.Context, in *KeyGenRequest, opts ...grpc.CallOption) (*KeyGenResponse, error) {
	out := new(KeyGenResponse)
	err := c.cc.Invoke(ctx, "/tss.TssService/KeyGen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tssServiceClient) KeySign(ctx context.Context, in *KeySignRequest, opts ...grpc.CallOption) (*KeySignResponse, error) {
	out := new(KeySignResponse)
	err := c.cc.Invoke(ctx, "/tss.TssService/KeySign", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tssServiceClient) KeyDelete(ctx context.Context, in *KeyDeleteRequest, opts ...grpc.CallOption) (*KeyDeleteResponse, error) {
	out := new(KeyDeleteResponse)
	err := c.cc.Invoke(ctx, "/tss.TssService/KeyDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tssServiceClient) VerifySignature(ctx context.Context, in *VerifySignatureRequest, opts ...grpc.CallOption) (*VerifySignatureResponse, error) {
	out := new(VerifySignatureResponse)
	err := c.cc.Invoke(ctx, "/tss.TssService/VerifySignature", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TssServiceServer is the server API for TssService service.
// All implementations must embed UnimplementedTssServiceServer
// for forward compatibility
type TssServiceServer interface {
	GetLocalPartyId(context.Context, *GetLocalPartyIdRequest) (*GetLocalPartyIdResponse, error)
	GetKey(context.Context, *GetKeyRequest) (*GetKeyResponse, error)
	KeyGen(context.Context, *KeyGenRequest) (*KeyGenResponse, error)
	KeySign(context.Context, *KeySignRequest) (*KeySignResponse, error)
	KeyDelete(context.Context, *KeyDeleteRequest) (*KeyDeleteResponse, error)
	VerifySignature(context.Context, *VerifySignatureRequest) (*VerifySignatureResponse, error)
	mustEmbedUnimplementedTssServiceServer()
}

// UnimplementedTssServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTssServiceServer struct {
}

func (UnimplementedTssServiceServer) GetLocalPartyId(context.Context, *GetLocalPartyIdRequest) (*GetLocalPartyIdResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocalPartyId not implemented")
}
func (UnimplementedTssServiceServer) GetKey(context.Context, *GetKeyRequest) (*GetKeyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetKey not implemented")
}
func (UnimplementedTssServiceServer) KeyGen(context.Context, *KeyGenRequest) (*KeyGenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyGen not implemented")
}
func (UnimplementedTssServiceServer) KeySign(context.Context, *KeySignRequest) (*KeySignResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeySign not implemented")
}
func (UnimplementedTssServiceServer) KeyDelete(context.Context, *KeyDeleteRequest) (*KeyDeleteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeyDelete not implemented")
}
func (UnimplementedTssServiceServer) VerifySignature(context.Context, *VerifySignatureRequest) (*VerifySignatureResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifySignature not implemented")
}
func (UnimplementedTssServiceServer) mustEmbedUnimplementedTssServiceServer() {}

// UnsafeTssServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TssServiceServer will
// result in compilation errors.
type UnsafeTssServiceServer interface {
	mustEmbedUnimplementedTssServiceServer()
}

func RegisterTssServiceServer(s grpc.ServiceRegistrar, srv TssServiceServer) {
	s.RegisterService(&TssService_ServiceDesc, srv)
}

func _TssService_GetLocalPartyId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetLocalPartyIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TssServiceServer).GetLocalPartyId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tss.TssService/GetLocalPartyId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TssServiceServer).GetLocalPartyId(ctx, req.(*GetLocalPartyIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TssService_GetKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetKeyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TssServiceServer).GetKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tss.TssService/GetKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TssServiceServer).GetKey(ctx, req.(*GetKeyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TssService_KeyGen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyGenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TssServiceServer).KeyGen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tss.TssService/KeyGen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TssServiceServer).KeyGen(ctx, req.(*KeyGenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TssService_KeySign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeySignRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TssServiceServer).KeySign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tss.TssService/KeySign",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TssServiceServer).KeySign(ctx, req.(*KeySignRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TssService_KeyDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(KeyDeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TssServiceServer).KeyDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tss.TssService/KeyDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TssServiceServer).KeyDelete(ctx, req.(*KeyDeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TssService_VerifySignature_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifySignatureRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TssServiceServer).VerifySignature(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tss.TssService/VerifySignature",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TssServiceServer).VerifySignature(ctx, req.(*VerifySignatureRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TssService_ServiceDesc is the grpc.ServiceDesc for TssService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TssService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tss.TssService",
	HandlerType: (*TssServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLocalPartyId",
			Handler:    _TssService_GetLocalPartyId_Handler,
		},
		{
			MethodName: "GetKey",
			Handler:    _TssService_GetKey_Handler,
		},
		{
			MethodName: "KeyGen",
			Handler:    _TssService_KeyGen_Handler,
		},
		{
			MethodName: "KeySign",
			Handler:    _TssService_KeySign_Handler,
		},
		{
			MethodName: "KeyDelete",
			Handler:    _TssService_KeyDelete_Handler,
		},
		{
			MethodName: "VerifySignature",
			Handler:    _TssService_VerifySignature_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tss.proto",
}
