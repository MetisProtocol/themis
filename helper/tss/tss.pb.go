// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.19.4
// source: tss.proto

package tss

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type KeyStatus int32

const (
	KeyStatus_KEY_STATUS_UNKNOWN KeyStatus = 0
	KeyStatus_KEY_STATUS_PENDING KeyStatus = 1
	KeyStatus_KEY_STATUS_READY   KeyStatus = 2
	KeyStatus_KEY_STATUS_ERROR   KeyStatus = 3
)

// Enum value maps for KeyStatus.
var (
	KeyStatus_name = map[int32]string{
		0: "KEY_STATUS_UNKNOWN",
		1: "KEY_STATUS_PENDING",
		2: "KEY_STATUS_READY",
		3: "KEY_STATUS_ERROR",
	}
	KeyStatus_value = map[string]int32{
		"KEY_STATUS_UNKNOWN": 0,
		"KEY_STATUS_PENDING": 1,
		"KEY_STATUS_READY":   2,
		"KEY_STATUS_ERROR":   3,
	}
)

func (x KeyStatus) Enum() *KeyStatus {
	p := new(KeyStatus)
	*p = x
	return p
}

func (x KeyStatus) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyStatus) Descriptor() protoreflect.EnumDescriptor {
	return file_tss_proto_enumTypes[0].Descriptor()
}

func (KeyStatus) Type() protoreflect.EnumType {
	return &file_tss_proto_enumTypes[0]
}

func (x KeyStatus) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeyStatus.Descriptor instead.
func (KeyStatus) EnumDescriptor() ([]byte, []int) {
	return file_tss_proto_rawDescGZIP(), []int{0}
}

// PartyID represents a participant in the TSS protocol rounds.
// Note: The `id` and `moniker` are provided for convenience to allow you to track participants easier.
// The `id` is intended to be a unique string representation of `key` and `moniker` can be anything (even left blank).
type PartyID struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id      string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Moniker string `protobuf:"bytes,2,opt,name=moniker,proto3" json:"moniker,omitempty"`
	Key     []byte `protobuf:"bytes,3,opt,name=key,proto3" json:"key,omitempty"`
}

func (x *PartyID) Reset() {
	*x = PartyID{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tss_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PartyID) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PartyID) ProtoMessage() {}

func (x *PartyID) ProtoReflect() protoreflect.Message {
	mi := &file_tss_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PartyID.ProtoReflect.Descriptor instead.
func (*PartyID) Descriptor() ([]byte, []int) {
	return file_tss_proto_rawDescGZIP(), []int{0}
}

func (x *PartyID) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *PartyID) GetMoniker() string {
	if x != nil {
		return x.Moniker
	}
	return ""
}

func (x *PartyID) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

type KeyData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId        string                 `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	KeySessionId string                 `protobuf:"bytes,2,opt,name=key_session_id,json=keySessionId,proto3" json:"key_session_id,omitempty"`
	Threshold    int32                  `protobuf:"varint,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
	AllPartyId   []*PartyID             `protobuf:"bytes,4,rep,name=all_party_id,json=allPartyId,proto3" json:"all_party_id,omitempty"`
	Pubkey       []byte                 `protobuf:"bytes,5,opt,name=pubkey,proto3" json:"pubkey,omitempty"`
	Status       KeyStatus              `protobuf:"varint,6,opt,name=status,proto3,enum=tss.KeyStatus" json:"status,omitempty"`
	SaveDataJson string                 `protobuf:"bytes,7,opt,name=save_data_json,json=saveDataJson,proto3" json:"save_data_json,omitempty"`
	CreatedTime  *timestamppb.Timestamp `protobuf:"bytes,101,opt,name=created_time,json=createdTime,proto3" json:"created_time,omitempty"`
	UpdatedTime  *timestamppb.Timestamp `protobuf:"bytes,102,opt,name=updated_time,json=updatedTime,proto3" json:"updated_time,omitempty"`
}

func (x *KeyData) Reset() {
	*x = KeyData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tss_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyData) ProtoMessage() {}

func (x *KeyData) ProtoReflect() protoreflect.Message {
	mi := &file_tss_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyData.ProtoReflect.Descriptor instead.
func (*KeyData) Descriptor() ([]byte, []int) {
	return file_tss_proto_rawDescGZIP(), []int{1}
}

func (x *KeyData) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *KeyData) GetKeySessionId() string {
	if x != nil {
		return x.KeySessionId
	}
	return ""
}

func (x *KeyData) GetThreshold() int32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *KeyData) GetAllPartyId() []*PartyID {
	if x != nil {
		return x.AllPartyId
	}
	return nil
}

func (x *KeyData) GetPubkey() []byte {
	if x != nil {
		return x.Pubkey
	}
	return nil
}

func (x *KeyData) GetStatus() KeyStatus {
	if x != nil {
		return x.Status
	}
	return KeyStatus_KEY_STATUS_UNKNOWN
}

func (x *KeyData) GetSaveDataJson() string {
	if x != nil {
		return x.SaveDataJson
	}
	return ""
}

func (x *KeyData) GetCreatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedTime
	}
	return nil
}

func (x *KeyData) GetUpdatedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedTime
	}
	return nil
}

type KeyGenPrepareMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId  string                 `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	KeyId      string                 `protobuf:"bytes,2,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Threshold  int32                  `protobuf:"varint,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
	AllPartyId []*PartyID             `protobuf:"bytes,4,rep,name=all_party_id,json=allPartyId,proto3" json:"all_party_id,omitempty"`
	Deadline   *timestamppb.Timestamp `protobuf:"bytes,101,opt,name=deadline,proto3" json:"deadline,omitempty"`
}

func (x *KeyGenPrepareMsg) Reset() {
	*x = KeyGenPrepareMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tss_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyGenPrepareMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyGenPrepareMsg) ProtoMessage() {}

func (x *KeyGenPrepareMsg) ProtoReflect() protoreflect.Message {
	mi := &file_tss_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyGenPrepareMsg.ProtoReflect.Descriptor instead.
func (*KeyGenPrepareMsg) Descriptor() ([]byte, []int) {
	return file_tss_proto_rawDescGZIP(), []int{2}
}

func (x *KeyGenPrepareMsg) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *KeyGenPrepareMsg) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *KeyGenPrepareMsg) GetThreshold() int32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *KeyGenPrepareMsg) GetAllPartyId() []*PartyID {
	if x != nil {
		return x.AllPartyId
	}
	return nil
}

func (x *KeyGenPrepareMsg) GetDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.Deadline
	}
	return nil
}

type KeyGenReadyMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KeyGenReadyMsg) Reset() {
	*x = KeyGenReadyMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tss_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyGenReadyMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyGenReadyMsg) ProtoMessage() {}

func (x *KeyGenReadyMsg) ProtoReflect() protoreflect.Message {
	mi := &file_tss_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyGenReadyMsg.ProtoReflect.Descriptor instead.
func (*KeyGenReadyMsg) Descriptor() ([]byte, []int) {
	return file_tss_proto_rawDescGZIP(), []int{3}
}

type KeyGenStartMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KeyGenStartMsg) Reset() {
	*x = KeyGenStartMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tss_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyGenStartMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyGenStartMsg) ProtoMessage() {}

func (x *KeyGenStartMsg) ProtoReflect() protoreflect.Message {
	mi := &file_tss_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyGenStartMsg.ProtoReflect.Descriptor instead.
func (*KeyGenStartMsg) Descriptor() ([]byte, []int) {
	return file_tss_proto_rawDescGZIP(), []int{4}
}

type KeyGenFinishMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSuccess     bool   `protobuf:"varint,1,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	FailureReason string `protobuf:"bytes,2,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason,omitempty"`
	PublicKey     []byte `protobuf:"bytes,3,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *KeyGenFinishMsg) Reset() {
	*x = KeyGenFinishMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tss_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyGenFinishMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyGenFinishMsg) ProtoMessage() {}

func (x *KeyGenFinishMsg) ProtoReflect() protoreflect.Message {
	mi := &file_tss_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyGenFinishMsg.ProtoReflect.Descriptor instead.
func (*KeyGenFinishMsg) Descriptor() ([]byte, []int) {
	return file_tss_proto_rawDescGZIP(), []int{5}
}

func (x *KeyGenFinishMsg) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *KeyGenFinishMsg) GetFailureReason() string {
	if x != nil {
		return x.FailureReason
	}
	return ""
}

func (x *KeyGenFinishMsg) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type KeySignPrepareMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignId       string                 `protobuf:"bytes,1,opt,name=sign_id,json=signId,proto3" json:"sign_id,omitempty"`
	SessionId    string                 `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	KeyId        string                 `protobuf:"bytes,3,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	KeySessionId string                 `protobuf:"bytes,4,opt,name=key_session_id,json=keySessionId,proto3" json:"key_session_id,omitempty"`
	SignMsg      []byte                 `protobuf:"bytes,5,opt,name=sign_msg,json=signMsg,proto3" json:"sign_msg,omitempty"`
	Deadline     *timestamppb.Timestamp `protobuf:"bytes,101,opt,name=deadline,proto3" json:"deadline,omitempty"`
}

func (x *KeySignPrepareMsg) Reset() {
	*x = KeySignPrepareMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tss_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeySignPrepareMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeySignPrepareMsg) ProtoMessage() {}

func (x *KeySignPrepareMsg) ProtoReflect() protoreflect.Message {
	mi := &file_tss_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeySignPrepareMsg.ProtoReflect.Descriptor instead.
func (*KeySignPrepareMsg) Descriptor() ([]byte, []int) {
	return file_tss_proto_rawDescGZIP(), []int{6}
}

func (x *KeySignPrepareMsg) GetSignId() string {
	if x != nil {
		return x.SignId
	}
	return ""
}

func (x *KeySignPrepareMsg) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *KeySignPrepareMsg) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *KeySignPrepareMsg) GetKeySessionId() string {
	if x != nil {
		return x.KeySessionId
	}
	return ""
}

func (x *KeySignPrepareMsg) GetSignMsg() []byte {
	if x != nil {
		return x.SignMsg
	}
	return nil
}

func (x *KeySignPrepareMsg) GetDeadline() *timestamppb.Timestamp {
	if x != nil {
		return x.Deadline
	}
	return nil
}

type KeySignReadyMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KeySignReadyMsg) Reset() {
	*x = KeySignReadyMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tss_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeySignReadyMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeySignReadyMsg) ProtoMessage() {}

func (x *KeySignReadyMsg) ProtoReflect() protoreflect.Message {
	mi := &file_tss_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeySignReadyMsg.ProtoReflect.Descriptor instead.
func (*KeySignReadyMsg) Descriptor() ([]byte, []int) {
	return file_tss_proto_rawDescGZIP(), []int{7}
}

type KeySignStartMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignPartyId []*PartyID `protobuf:"bytes,3,rep,name=sign_party_id,json=signPartyId,proto3" json:"sign_party_id,omitempty"`
}

func (x *KeySignStartMsg) Reset() {
	*x = KeySignStartMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tss_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeySignStartMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeySignStartMsg) ProtoMessage() {}

func (x *KeySignStartMsg) ProtoReflect() protoreflect.Message {
	mi := &file_tss_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeySignStartMsg.ProtoReflect.Descriptor instead.
func (*KeySignStartMsg) Descriptor() ([]byte, []int) {
	return file_tss_proto_rawDescGZIP(), []int{8}
}

func (x *KeySignStartMsg) GetSignPartyId() []*PartyID {
	if x != nil {
		return x.SignPartyId
	}
	return nil
}

type KeySignCancelMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KeySignCancelMsg) Reset() {
	*x = KeySignCancelMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tss_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeySignCancelMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeySignCancelMsg) ProtoMessage() {}

func (x *KeySignCancelMsg) ProtoReflect() protoreflect.Message {
	mi := &file_tss_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeySignCancelMsg.ProtoReflect.Descriptor instead.
func (*KeySignCancelMsg) Descriptor() ([]byte, []int) {
	return file_tss_proto_rawDescGZIP(), []int{9}
}

type KeySignFinishMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsSuccess     bool   `protobuf:"varint,1,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
	FailureReason string `protobuf:"bytes,2,opt,name=failure_reason,json=failureReason,proto3" json:"failure_reason,omitempty"`
	SignatureR    []byte `protobuf:"bytes,3,opt,name=signature_r,json=signatureR,proto3" json:"signature_r,omitempty"`
	SignatureS    []byte `protobuf:"bytes,4,opt,name=signature_s,json=signatureS,proto3" json:"signature_s,omitempty"`
	SignatureV    []byte `protobuf:"bytes,5,opt,name=signature_v,json=signatureV,proto3" json:"signature_v,omitempty"`
}

func (x *KeySignFinishMsg) Reset() {
	*x = KeySignFinishMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tss_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeySignFinishMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeySignFinishMsg) ProtoMessage() {}

func (x *KeySignFinishMsg) ProtoReflect() protoreflect.Message {
	mi := &file_tss_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeySignFinishMsg.ProtoReflect.Descriptor instead.
func (*KeySignFinishMsg) Descriptor() ([]byte, []int) {
	return file_tss_proto_rawDescGZIP(), []int{10}
}

func (x *KeySignFinishMsg) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

func (x *KeySignFinishMsg) GetFailureReason() string {
	if x != nil {
		return x.FailureReason
	}
	return ""
}

func (x *KeySignFinishMsg) GetSignatureR() []byte {
	if x != nil {
		return x.SignatureR
	}
	return nil
}

func (x *KeySignFinishMsg) GetSignatureS() []byte {
	if x != nil {
		return x.SignatureS
	}
	return nil
}

func (x *KeySignFinishMsg) GetSignatureV() []byte {
	if x != nil {
		return x.SignatureV
	}
	return nil
}

type ProcessUpdateMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FromPartyId  string `protobuf:"bytes,1,opt,name=from_party_id,json=fromPartyId,proto3" json:"from_party_id,omitempty"`
	MsgWireBytes []byte `protobuf:"bytes,2,opt,name=msg_wire_bytes,json=msgWireBytes,proto3" json:"msg_wire_bytes,omitempty"`
	IsBroadcast  bool   `protobuf:"varint,3,opt,name=is_broadcast,json=isBroadcast,proto3" json:"is_broadcast,omitempty"`
}

func (x *ProcessUpdateMsg) Reset() {
	*x = ProcessUpdateMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tss_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessUpdateMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessUpdateMsg) ProtoMessage() {}

func (x *ProcessUpdateMsg) ProtoReflect() protoreflect.Message {
	mi := &file_tss_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessUpdateMsg.ProtoReflect.Descriptor instead.
func (*ProcessUpdateMsg) Descriptor() ([]byte, []int) {
	return file_tss_proto_rawDescGZIP(), []int{11}
}

func (x *ProcessUpdateMsg) GetFromPartyId() string {
	if x != nil {
		return x.FromPartyId
	}
	return ""
}

func (x *ProcessUpdateMsg) GetMsgWireBytes() []byte {
	if x != nil {
		return x.MsgWireBytes
	}
	return nil
}

func (x *ProcessUpdateMsg) GetIsBroadcast() bool {
	if x != nil {
		return x.IsBroadcast
	}
	return false
}

type ProcessErrorMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ErrorMsg string `protobuf:"bytes,1,opt,name=error_msg,json=errorMsg,proto3" json:"error_msg,omitempty"`
}

func (x *ProcessErrorMsg) Reset() {
	*x = ProcessErrorMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tss_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcessErrorMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcessErrorMsg) ProtoMessage() {}

func (x *ProcessErrorMsg) ProtoReflect() protoreflect.Message {
	mi := &file_tss_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcessErrorMsg.ProtoReflect.Descriptor instead.
func (*ProcessErrorMsg) Descriptor() ([]byte, []int) {
	return file_tss_proto_rawDescGZIP(), []int{12}
}

func (x *ProcessErrorMsg) GetErrorMsg() string {
	if x != nil {
		return x.ErrorMsg
	}
	return ""
}

type TssP2PMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to MsgType:
	//
	//	*TssP2PMsg_KeyGenPrepareMsg
	//	*TssP2PMsg_KeyGenReadyMsg
	//	*TssP2PMsg_KeyGenStartMsg
	//	*TssP2PMsg_KeyGenFinishMsg
	//	*TssP2PMsg_KeySignPrepareMsg
	//	*TssP2PMsg_KeySignReadyMsg
	//	*TssP2PMsg_KeySignStartMsg
	//	*TssP2PMsg_KeySignCancelMsg
	//	*TssP2PMsg_KeySignFinishMsg
	//	*TssP2PMsg_ProcessUpdateMsg
	//	*TssP2PMsg_ProcessErrorMsg
	MsgType isTssP2PMsg_MsgType `protobuf_oneof:"msg_type"`
}

func (x *TssP2PMsg) Reset() {
	*x = TssP2PMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tss_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TssP2PMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TssP2PMsg) ProtoMessage() {}

func (x *TssP2PMsg) ProtoReflect() protoreflect.Message {
	mi := &file_tss_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TssP2PMsg.ProtoReflect.Descriptor instead.
func (*TssP2PMsg) Descriptor() ([]byte, []int) {
	return file_tss_proto_rawDescGZIP(), []int{13}
}

func (m *TssP2PMsg) GetMsgType() isTssP2PMsg_MsgType {
	if m != nil {
		return m.MsgType
	}
	return nil
}

func (x *TssP2PMsg) GetKeyGenPrepareMsg() *KeyGenPrepareMsg {
	if x, ok := x.GetMsgType().(*TssP2PMsg_KeyGenPrepareMsg); ok {
		return x.KeyGenPrepareMsg
	}
	return nil
}

func (x *TssP2PMsg) GetKeyGenReadyMsg() *KeyGenReadyMsg {
	if x, ok := x.GetMsgType().(*TssP2PMsg_KeyGenReadyMsg); ok {
		return x.KeyGenReadyMsg
	}
	return nil
}

func (x *TssP2PMsg) GetKeyGenStartMsg() *KeyGenStartMsg {
	if x, ok := x.GetMsgType().(*TssP2PMsg_KeyGenStartMsg); ok {
		return x.KeyGenStartMsg
	}
	return nil
}

func (x *TssP2PMsg) GetKeyGenFinishMsg() *KeyGenFinishMsg {
	if x, ok := x.GetMsgType().(*TssP2PMsg_KeyGenFinishMsg); ok {
		return x.KeyGenFinishMsg
	}
	return nil
}

func (x *TssP2PMsg) GetKeySignPrepareMsg() *KeySignPrepareMsg {
	if x, ok := x.GetMsgType().(*TssP2PMsg_KeySignPrepareMsg); ok {
		return x.KeySignPrepareMsg
	}
	return nil
}

func (x *TssP2PMsg) GetKeySignReadyMsg() *KeySignReadyMsg {
	if x, ok := x.GetMsgType().(*TssP2PMsg_KeySignReadyMsg); ok {
		return x.KeySignReadyMsg
	}
	return nil
}

func (x *TssP2PMsg) GetKeySignStartMsg() *KeySignStartMsg {
	if x, ok := x.GetMsgType().(*TssP2PMsg_KeySignStartMsg); ok {
		return x.KeySignStartMsg
	}
	return nil
}

func (x *TssP2PMsg) GetKeySignCancelMsg() *KeySignCancelMsg {
	if x, ok := x.GetMsgType().(*TssP2PMsg_KeySignCancelMsg); ok {
		return x.KeySignCancelMsg
	}
	return nil
}

func (x *TssP2PMsg) GetKeySignFinishMsg() *KeySignFinishMsg {
	if x, ok := x.GetMsgType().(*TssP2PMsg_KeySignFinishMsg); ok {
		return x.KeySignFinishMsg
	}
	return nil
}

func (x *TssP2PMsg) GetProcessUpdateMsg() *ProcessUpdateMsg {
	if x, ok := x.GetMsgType().(*TssP2PMsg_ProcessUpdateMsg); ok {
		return x.ProcessUpdateMsg
	}
	return nil
}

func (x *TssP2PMsg) GetProcessErrorMsg() *ProcessErrorMsg {
	if x, ok := x.GetMsgType().(*TssP2PMsg_ProcessErrorMsg); ok {
		return x.ProcessErrorMsg
	}
	return nil
}

type isTssP2PMsg_MsgType interface {
	isTssP2PMsg_MsgType()
}

type TssP2PMsg_KeyGenPrepareMsg struct {
	KeyGenPrepareMsg *KeyGenPrepareMsg `protobuf:"bytes,11,opt,name=key_gen_prepare_msg,json=keyGenPrepareMsg,proto3,oneof"`
}

type TssP2PMsg_KeyGenReadyMsg struct {
	KeyGenReadyMsg *KeyGenReadyMsg `protobuf:"bytes,12,opt,name=key_gen_ready_msg,json=keyGenReadyMsg,proto3,oneof"`
}

type TssP2PMsg_KeyGenStartMsg struct {
	KeyGenStartMsg *KeyGenStartMsg `protobuf:"bytes,13,opt,name=key_gen_start_msg,json=keyGenStartMsg,proto3,oneof"`
}

type TssP2PMsg_KeyGenFinishMsg struct {
	KeyGenFinishMsg *KeyGenFinishMsg `protobuf:"bytes,14,opt,name=key_gen_finish_msg,json=keyGenFinishMsg,proto3,oneof"`
}

type TssP2PMsg_KeySignPrepareMsg struct {
	KeySignPrepareMsg *KeySignPrepareMsg `protobuf:"bytes,21,opt,name=key_sign_prepare_msg,json=keySignPrepareMsg,proto3,oneof"`
}

type TssP2PMsg_KeySignReadyMsg struct {
	KeySignReadyMsg *KeySignReadyMsg `protobuf:"bytes,22,opt,name=key_sign_ready_msg,json=keySignReadyMsg,proto3,oneof"`
}

type TssP2PMsg_KeySignStartMsg struct {
	KeySignStartMsg *KeySignStartMsg `protobuf:"bytes,23,opt,name=key_sign_start_msg,json=keySignStartMsg,proto3,oneof"`
}

type TssP2PMsg_KeySignCancelMsg struct {
	KeySignCancelMsg *KeySignCancelMsg `protobuf:"bytes,24,opt,name=key_sign_cancel_msg,json=keySignCancelMsg,proto3,oneof"`
}

type TssP2PMsg_KeySignFinishMsg struct {
	KeySignFinishMsg *KeySignFinishMsg `protobuf:"bytes,25,opt,name=key_sign_finish_msg,json=keySignFinishMsg,proto3,oneof"`
}

type TssP2PMsg_ProcessUpdateMsg struct {
	ProcessUpdateMsg *ProcessUpdateMsg `protobuf:"bytes,41,opt,name=process_update_msg,json=processUpdateMsg,proto3,oneof"`
}

type TssP2PMsg_ProcessErrorMsg struct {
	ProcessErrorMsg *ProcessErrorMsg `protobuf:"bytes,42,opt,name=process_error_msg,json=processErrorMsg,proto3,oneof"`
}

func (*TssP2PMsg_KeyGenPrepareMsg) isTssP2PMsg_MsgType() {}

func (*TssP2PMsg_KeyGenReadyMsg) isTssP2PMsg_MsgType() {}

func (*TssP2PMsg_KeyGenStartMsg) isTssP2PMsg_MsgType() {}

func (*TssP2PMsg_KeyGenFinishMsg) isTssP2PMsg_MsgType() {}

func (*TssP2PMsg_KeySignPrepareMsg) isTssP2PMsg_MsgType() {}

func (*TssP2PMsg_KeySignReadyMsg) isTssP2PMsg_MsgType() {}

func (*TssP2PMsg_KeySignStartMsg) isTssP2PMsg_MsgType() {}

func (*TssP2PMsg_KeySignCancelMsg) isTssP2PMsg_MsgType() {}

func (*TssP2PMsg_KeySignFinishMsg) isTssP2PMsg_MsgType() {}

func (*TssP2PMsg_ProcessUpdateMsg) isTssP2PMsg_MsgType() {}

func (*TssP2PMsg_ProcessErrorMsg) isTssP2PMsg_MsgType() {}

type GetLocalPartyIdRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *GetLocalPartyIdRequest) Reset() {
	*x = GetLocalPartyIdRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tss_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLocalPartyIdRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLocalPartyIdRequest) ProtoMessage() {}

func (x *GetLocalPartyIdRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tss_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLocalPartyIdRequest.ProtoReflect.Descriptor instead.
func (*GetLocalPartyIdRequest) Descriptor() ([]byte, []int) {
	return file_tss_proto_rawDescGZIP(), []int{14}
}

type GetLocalPartyIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PartyId *PartyID `protobuf:"bytes,1,opt,name=party_id,json=partyId,proto3" json:"party_id,omitempty"`
}

func (x *GetLocalPartyIdResponse) Reset() {
	*x = GetLocalPartyIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tss_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetLocalPartyIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLocalPartyIdResponse) ProtoMessage() {}

func (x *GetLocalPartyIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tss_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLocalPartyIdResponse.ProtoReflect.Descriptor instead.
func (*GetLocalPartyIdResponse) Descriptor() ([]byte, []int) {
	return file_tss_proto_rawDescGZIP(), []int{15}
}

func (x *GetLocalPartyIdResponse) GetPartyId() *PartyID {
	if x != nil {
		return x.PartyId
	}
	return nil
}

type GetKeyRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *GetKeyRequest) Reset() {
	*x = GetKeyRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tss_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyRequest) ProtoMessage() {}

func (x *GetKeyRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tss_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyRequest.ProtoReflect.Descriptor instead.
func (*GetKeyRequest) Descriptor() ([]byte, []int) {
	return file_tss_proto_rawDescGZIP(), []int{16}
}

func (x *GetKeyRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

type GetKeyResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId      string     `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	PublicKey  []byte     `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Threshold  int32      `protobuf:"varint,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
	AllPartyId []*PartyID `protobuf:"bytes,4,rep,name=all_party_id,json=allPartyId,proto3" json:"all_party_id,omitempty"`
	Status     KeyStatus  `protobuf:"varint,5,opt,name=status,proto3,enum=tss.KeyStatus" json:"status,omitempty"`
}

func (x *GetKeyResponse) Reset() {
	*x = GetKeyResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tss_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetKeyResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetKeyResponse) ProtoMessage() {}

func (x *GetKeyResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tss_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetKeyResponse.ProtoReflect.Descriptor instead.
func (*GetKeyResponse) Descriptor() ([]byte, []int) {
	return file_tss_proto_rawDescGZIP(), []int{17}
}

func (x *GetKeyResponse) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *GetKeyResponse) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *GetKeyResponse) GetThreshold() int32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *GetKeyResponse) GetAllPartyId() []*PartyID {
	if x != nil {
		return x.AllPartyId
	}
	return nil
}

func (x *GetKeyResponse) GetStatus() KeyStatus {
	if x != nil {
		return x.Status
	}
	return KeyStatus_KEY_STATUS_UNKNOWN
}

type KeyGenRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId      string     `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	Threshold  int32      `protobuf:"varint,2,opt,name=threshold,proto3" json:"threshold,omitempty"`
	AllPartyId []*PartyID `protobuf:"bytes,3,rep,name=all_party_id,json=allPartyId,proto3" json:"all_party_id,omitempty"`
}

func (x *KeyGenRequest) Reset() {
	*x = KeyGenRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tss_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyGenRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyGenRequest) ProtoMessage() {}

func (x *KeyGenRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tss_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyGenRequest.ProtoReflect.Descriptor instead.
func (*KeyGenRequest) Descriptor() ([]byte, []int) {
	return file_tss_proto_rawDescGZIP(), []int{18}
}

func (x *KeyGenRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *KeyGenRequest) GetThreshold() int32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *KeyGenRequest) GetAllPartyId() []*PartyID {
	if x != nil {
		return x.AllPartyId
	}
	return nil
}

type KeyGenResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	PublicKey []byte `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
}

func (x *KeyGenResponse) Reset() {
	*x = KeyGenResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tss_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyGenResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyGenResponse) ProtoMessage() {}

func (x *KeyGenResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tss_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyGenResponse.ProtoReflect.Descriptor instead.
func (*KeyGenResponse) Descriptor() ([]byte, []int) {
	return file_tss_proto_rawDescGZIP(), []int{19}
}

func (x *KeyGenResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *KeyGenResponse) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

type KeySignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId   string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
	SignMsg []byte `protobuf:"bytes,2,opt,name=sign_msg,json=signMsg,proto3" json:"sign_msg,omitempty"`
	SignId  string `protobuf:"bytes,3,opt,name=sign_id,json=signId,proto3" json:"sign_id,omitempty"`
}

func (x *KeySignRequest) Reset() {
	*x = KeySignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tss_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeySignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeySignRequest) ProtoMessage() {}

func (x *KeySignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tss_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeySignRequest.ProtoReflect.Descriptor instead.
func (*KeySignRequest) Descriptor() ([]byte, []int) {
	return file_tss_proto_rawDescGZIP(), []int{20}
}

func (x *KeySignRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

func (x *KeySignRequest) GetSignMsg() []byte {
	if x != nil {
		return x.SignMsg
	}
	return nil
}

func (x *KeySignRequest) GetSignId() string {
	if x != nil {
		return x.SignId
	}
	return ""
}

type KeySignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SessionId  string `protobuf:"bytes,1,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	SignatureR []byte `protobuf:"bytes,2,opt,name=signature_r,json=signatureR,proto3" json:"signature_r,omitempty"`
	SignatureS []byte `protobuf:"bytes,3,opt,name=signature_s,json=signatureS,proto3" json:"signature_s,omitempty"`
	SignatureV []byte `protobuf:"bytes,4,opt,name=signature_v,json=signatureV,proto3" json:"signature_v,omitempty"`
}

func (x *KeySignResponse) Reset() {
	*x = KeySignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tss_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeySignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeySignResponse) ProtoMessage() {}

func (x *KeySignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tss_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeySignResponse.ProtoReflect.Descriptor instead.
func (*KeySignResponse) Descriptor() ([]byte, []int) {
	return file_tss_proto_rawDescGZIP(), []int{21}
}

func (x *KeySignResponse) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *KeySignResponse) GetSignatureR() []byte {
	if x != nil {
		return x.SignatureR
	}
	return nil
}

func (x *KeySignResponse) GetSignatureS() []byte {
	if x != nil {
		return x.SignatureS
	}
	return nil
}

func (x *KeySignResponse) GetSignatureV() []byte {
	if x != nil {
		return x.SignatureV
	}
	return nil
}

type KeyDeleteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeyId string `protobuf:"bytes,1,opt,name=key_id,json=keyId,proto3" json:"key_id,omitempty"`
}

func (x *KeyDeleteRequest) Reset() {
	*x = KeyDeleteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tss_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyDeleteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyDeleteRequest) ProtoMessage() {}

func (x *KeyDeleteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tss_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyDeleteRequest.ProtoReflect.Descriptor instead.
func (*KeyDeleteRequest) Descriptor() ([]byte, []int) {
	return file_tss_proto_rawDescGZIP(), []int{22}
}

func (x *KeyDeleteRequest) GetKeyId() string {
	if x != nil {
		return x.KeyId
	}
	return ""
}

type KeyDeleteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *KeyDeleteResponse) Reset() {
	*x = KeyDeleteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tss_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyDeleteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyDeleteResponse) ProtoMessage() {}

func (x *KeyDeleteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tss_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyDeleteResponse.ProtoReflect.Descriptor instead.
func (*KeyDeleteResponse) Descriptor() ([]byte, []int) {
	return file_tss_proto_rawDescGZIP(), []int{23}
}

type VerifySignatureRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SignMsg    []byte `protobuf:"bytes,1,opt,name=sign_msg,json=signMsg,proto3" json:"sign_msg,omitempty"`
	PublicKey  []byte `protobuf:"bytes,2,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	SignatureR []byte `protobuf:"bytes,3,opt,name=signature_r,json=signatureR,proto3" json:"signature_r,omitempty"`
	SignatureS []byte `protobuf:"bytes,4,opt,name=signature_s,json=signatureS,proto3" json:"signature_s,omitempty"`
	SignatureV []byte `protobuf:"bytes,5,opt,name=signature_v,json=signatureV,proto3" json:"signature_v,omitempty"`
}

func (x *VerifySignatureRequest) Reset() {
	*x = VerifySignatureRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tss_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifySignatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifySignatureRequest) ProtoMessage() {}

func (x *VerifySignatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tss_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifySignatureRequest.ProtoReflect.Descriptor instead.
func (*VerifySignatureRequest) Descriptor() ([]byte, []int) {
	return file_tss_proto_rawDescGZIP(), []int{24}
}

func (x *VerifySignatureRequest) GetSignMsg() []byte {
	if x != nil {
		return x.SignMsg
	}
	return nil
}

func (x *VerifySignatureRequest) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *VerifySignatureRequest) GetSignatureR() []byte {
	if x != nil {
		return x.SignatureR
	}
	return nil
}

func (x *VerifySignatureRequest) GetSignatureS() []byte {
	if x != nil {
		return x.SignatureS
	}
	return nil
}

func (x *VerifySignatureRequest) GetSignatureV() []byte {
	if x != nil {
		return x.SignatureV
	}
	return nil
}

type VerifySignatureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsValid bool `protobuf:"varint,1,opt,name=is_valid,json=isValid,proto3" json:"is_valid,omitempty"`
}

func (x *VerifySignatureResponse) Reset() {
	*x = VerifySignatureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tss_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VerifySignatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VerifySignatureResponse) ProtoMessage() {}

func (x *VerifySignatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tss_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VerifySignatureResponse.ProtoReflect.Descriptor instead.
func (*VerifySignatureResponse) Descriptor() ([]byte, []int) {
	return file_tss_proto_rawDescGZIP(), []int{25}
}

func (x *VerifySignatureResponse) GetIsValid() bool {
	if x != nil {
		return x.IsValid
	}
	return false
}

var File_tss_proto protoreflect.FileDescriptor

var file_tss_proto_rawDesc = []byte{
	0x0a, 0x09, 0x74, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x74, 0x73, 0x73,
	0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x45, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x12, 0x0e, 0x0a, 0x02,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x6d, 0x6f, 0x6e, 0x69, 0x6b, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d,
	0x6f, 0x6e, 0x69, 0x6b, 0x65, 0x72, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x22, 0xf8, 0x02, 0x0a, 0x07, 0x4b, 0x65, 0x79,
	0x44, 0x61, 0x74, 0x61, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6b,
	0x65, 0x79, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x2e, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x73, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12,
	0x16, 0x0a, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x0e, 0x2e, 0x74, 0x73, 0x73, 0x2e, 0x4b, 0x65,
	0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x24, 0x0a, 0x0e, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x5f, 0x6a, 0x73, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x73, 0x61, 0x76, 0x65, 0x44, 0x61, 0x74,
	0x61, 0x4a, 0x73, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x66, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0b, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xce, 0x01, 0x0a, 0x10, 0x4b, 0x65, 0x79, 0x47, 0x65, 0x6e, 0x50, 0x72,
	0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x2e, 0x0a, 0x0c,
	0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x73, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44,
	0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x36, 0x0a, 0x08,
	0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64,
	0x6c, 0x69, 0x6e, 0x65, 0x22, 0x10, 0x0a, 0x0e, 0x4b, 0x65, 0x79, 0x47, 0x65, 0x6e, 0x52, 0x65,
	0x61, 0x64, 0x79, 0x4d, 0x73, 0x67, 0x22, 0x10, 0x0a, 0x0e, 0x4b, 0x65, 0x79, 0x47, 0x65, 0x6e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x73, 0x67, 0x22, 0x76, 0x0a, 0x0f, 0x4b, 0x65, 0x79, 0x47,
	0x65, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4d, 0x73, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x69,
	0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x25, 0x0a, 0x0e, 0x66, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x22, 0xdb, 0x01, 0x0a, 0x11, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x12,
	0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x15,
	0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x0e, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x6b,
	0x65, 0x79, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73,
	0x69, 0x67, 0x6e, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x73,
	0x69, 0x67, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x36, 0x0a, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69,
	0x6e, 0x65, 0x18, 0x65, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x08, 0x64, 0x65, 0x61, 0x64, 0x6c, 0x69, 0x6e, 0x65, 0x22, 0x11,
	0x0a, 0x0f, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x79, 0x4d, 0x73,
	0x67, 0x22, 0x43, 0x0a, 0x0f, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x4d, 0x73, 0x67, 0x12, 0x30, 0x0a, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x73,
	0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x50,
	0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x22, 0x12, 0x0a, 0x10, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x67,
	0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x73, 0x67, 0x22, 0xbb, 0x01, 0x0a, 0x10, 0x4b,
	0x65, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4d, 0x73, 0x67, 0x12,
	0x1d, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x25,
	0x0a, 0x0e, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x66, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x5f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x22, 0x7f, 0x0a, 0x10, 0x50, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x22, 0x0a, 0x0d,
	0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64,
	0x12, 0x24, 0x0a, 0x0e, 0x6d, 0x73, 0x67, 0x5f, 0x77, 0x69, 0x72, 0x65, 0x5f, 0x62, 0x79, 0x74,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0c, 0x6d, 0x73, 0x67, 0x57, 0x69, 0x72,
	0x65, 0x42, 0x79, 0x74, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x62, 0x72, 0x6f,
	0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x69, 0x73,
	0x42, 0x72, 0x6f, 0x61, 0x64, 0x63, 0x61, 0x73, 0x74, 0x22, 0x2e, 0x0a, 0x0f, 0x50, 0x72, 0x6f,
	0x63, 0x65, 0x73, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x12, 0x1b, 0x0a, 0x09,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x22, 0x98, 0x06, 0x0a, 0x09, 0x54, 0x73,
	0x73, 0x50, 0x32, 0x50, 0x4d, 0x73, 0x67, 0x12, 0x46, 0x0a, 0x13, 0x6b, 0x65, 0x79, 0x5f, 0x67,
	0x65, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x73, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x47, 0x65,
	0x6e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x10, 0x6b,
	0x65, 0x79, 0x47, 0x65, 0x6e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x73, 0x67, 0x12,
	0x40, 0x0a, 0x11, 0x6b, 0x65, 0x79, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x72, 0x65, 0x61, 0x64, 0x79,
	0x5f, 0x6d, 0x73, 0x67, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x73, 0x73,
	0x2e, 0x4b, 0x65, 0x79, 0x47, 0x65, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x79, 0x4d, 0x73, 0x67, 0x48,
	0x00, 0x52, 0x0e, 0x6b, 0x65, 0x79, 0x47, 0x65, 0x6e, 0x52, 0x65, 0x61, 0x64, 0x79, 0x4d, 0x73,
	0x67, 0x12, 0x40, 0x0a, 0x11, 0x6b, 0x65, 0x79, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74,
	0x73, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x47, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x73,
	0x67, 0x48, 0x00, 0x52, 0x0e, 0x6b, 0x65, 0x79, 0x47, 0x65, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x4d, 0x73, 0x67, 0x12, 0x43, 0x0a, 0x12, 0x6b, 0x65, 0x79, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x66,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x74, 0x73, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x47, 0x65, 0x6e, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x0f, 0x6b, 0x65, 0x79, 0x47, 0x65, 0x6e, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x4d, 0x73, 0x67, 0x12, 0x49, 0x0a, 0x14, 0x6b, 0x65, 0x79, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x5f, 0x70, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x5f, 0x6d, 0x73, 0x67,
	0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x73, 0x73, 0x2e, 0x4b, 0x65, 0x79,
	0x53, 0x69, 0x67, 0x6e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65, 0x4d, 0x73, 0x67, 0x48, 0x00,
	0x52, 0x11, 0x6b, 0x65, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x50, 0x72, 0x65, 0x70, 0x61, 0x72, 0x65,
	0x4d, 0x73, 0x67, 0x12, 0x43, 0x0a, 0x12, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f,
	0x72, 0x65, 0x61, 0x64, 0x79, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x74, 0x73, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x61,
	0x64, 0x79, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x0f, 0x6b, 0x65, 0x79, 0x53, 0x69, 0x67, 0x6e,
	0x52, 0x65, 0x61, 0x64, 0x79, 0x4d, 0x73, 0x67, 0x12, 0x43, 0x0a, 0x12, 0x6b, 0x65, 0x79, 0x5f,
	0x73, 0x69, 0x67, 0x6e, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x17,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x73, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x53, 0x69,
	0x67, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x0f, 0x6b, 0x65,
	0x79, 0x53, 0x69, 0x67, 0x6e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x46, 0x0a,
	0x13, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x63, 0x61, 0x6e, 0x63, 0x65, 0x6c,
	0x5f, 0x6d, 0x73, 0x67, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x73, 0x73,
	0x2e, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x43, 0x61, 0x6e, 0x63, 0x65, 0x6c, 0x4d, 0x73,
	0x67, 0x48, 0x00, 0x52, 0x10, 0x6b, 0x65, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x43, 0x61, 0x6e, 0x63,
	0x65, 0x6c, 0x4d, 0x73, 0x67, 0x12, 0x46, 0x0a, 0x13, 0x6b, 0x65, 0x79, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x5f, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x73, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x67, 0x6e,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x10, 0x6b, 0x65, 0x79,
	0x53, 0x69, 0x67, 0x6e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4d, 0x73, 0x67, 0x12, 0x45, 0x0a,
	0x12, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f,
	0x6d, 0x73, 0x67, 0x18, 0x29, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x73, 0x73, 0x2e,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x4d, 0x73, 0x67,
	0x48, 0x00, 0x52, 0x10, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x4d, 0x73, 0x67, 0x12, 0x42, 0x0a, 0x11, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x74, 0x73, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x4d, 0x73, 0x67, 0x48, 0x00, 0x52, 0x0f, 0x70, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x73, 0x67, 0x42, 0x0a, 0x0a, 0x08, 0x6d, 0x73, 0x67, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x22, 0x18, 0x0a, 0x16, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c,
	0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x42,
	0x0a, 0x17, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x27, 0x0a, 0x08, 0x70, 0x61, 0x72,
	0x74, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x73,
	0x73, 0x2e, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x44, 0x52, 0x07, 0x70, 0x61, 0x72, 0x74, 0x79,
	0x49, 0x64, 0x22, 0x26, 0x0a, 0x0d, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x22, 0xbc, 0x01, 0x0a, 0x0e, 0x47,
	0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x15, 0x0a,
	0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b,
	0x65, 0x79, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b,
	0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c,
	0x64, 0x12, 0x2e, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69,
	0x64, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x73, 0x73, 0x2e, 0x50, 0x61,
	0x72, 0x74, 0x79, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49,
	0x64, 0x12, 0x26, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x0e, 0x2e, 0x74, 0x73, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x74, 0x0a, 0x0d, 0x4b, 0x65, 0x79,
	0x47, 0x65, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65,
	0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12,
	0x2e, 0x0a, 0x0c, 0x61, 0x6c, 0x6c, 0x5f, 0x70, 0x61, 0x72, 0x74, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x74, 0x73, 0x73, 0x2e, 0x50, 0x61, 0x72, 0x74,
	0x79, 0x49, 0x44, 0x52, 0x0a, 0x61, 0x6c, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x22,
	0x4e, 0x0a, 0x0e, 0x4b, 0x65, 0x79, 0x47, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x22,
	0x5b, 0x0a, 0x0e, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x73, 0x69, 0x67, 0x6e,
	0x5f, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6e,
	0x4d, 0x73, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x69, 0x67, 0x6e, 0x49, 0x64, 0x22, 0x93, 0x01, 0x0a,
	0x0f, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x53, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x76,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x56, 0x22, 0x29, 0x0a, 0x10, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x15, 0x0a, 0x06, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x6b, 0x65, 0x79, 0x49, 0x64, 0x22, 0x13, 0x0a,
	0x11, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0xb5, 0x01, 0x0a, 0x16, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x19, 0x0a,
	0x08, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x73, 0x69, 0x67, 0x6e, 0x4d, 0x73, 0x67, 0x12, 0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c,
	0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a, 0x73,
	0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x69, 0x67,
	0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x76, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0a,
	0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x56, 0x22, 0x34, 0x0a, 0x17, 0x56, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x69, 0x73, 0x5f, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x69, 0x73, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x2a, 0x67, 0x0a, 0x09, 0x4b, 0x65, 0x79, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x16, 0x0a,
	0x12, 0x4b, 0x45, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x16, 0x0a, 0x12, 0x4b, 0x45, 0x59, 0x5f, 0x53, 0x54, 0x41,
	0x54, 0x55, 0x53, 0x5f, 0x50, 0x45, 0x4e, 0x44, 0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x14, 0x0a,
	0x10, 0x4b, 0x45, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55, 0x53, 0x5f, 0x52, 0x45, 0x41, 0x44,
	0x59, 0x10, 0x02, 0x12, 0x14, 0x0a, 0x10, 0x4b, 0x45, 0x59, 0x5f, 0x53, 0x54, 0x41, 0x54, 0x55,
	0x53, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x32, 0x80, 0x03, 0x0a, 0x0a, 0x54, 0x73,
	0x73, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4c, 0x0a, 0x0f, 0x47, 0x65, 0x74, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x12, 0x1b, 0x2e, 0x74, 0x73,
	0x73, 0x2e, 0x47, 0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49,
	0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x74, 0x73, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x50, 0x61, 0x72, 0x74, 0x79, 0x49, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79,
	0x12, 0x12, 0x2e, 0x74, 0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x74, 0x73, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x4b, 0x65,
	0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x31, 0x0a, 0x06, 0x4b, 0x65, 0x79,
	0x47, 0x65, 0x6e, 0x12, 0x12, 0x2e, 0x74, 0x73, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x47, 0x65, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x13, 0x2e, 0x74, 0x73, 0x73, 0x2e, 0x4b, 0x65,
	0x79, 0x47, 0x65, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a, 0x07,
	0x4b, 0x65, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x12, 0x13, 0x2e, 0x74, 0x73, 0x73, 0x2e, 0x4b, 0x65,
	0x79, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x74,
	0x73, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x12,
	0x15, 0x2e, 0x74, 0x73, 0x73, 0x2e, 0x4b, 0x65, 0x79, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x74, 0x73, 0x73, 0x2e, 0x4b, 0x65, 0x79,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c,
	0x0a, 0x0f, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x12, 0x1b, 0x2e, 0x74, 0x73, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x74, 0x73, 0x73, 0x2e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x53, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x25, 0x5a, 0x23,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x6d, 0x65, 0x74, 0x69, 0x73,
	0x2d, 0x73, 0x65, 0x71, 0x2f, 0x74, 0x73, 0x73, 0x2d, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f,
	0x74, 0x73, 0x73, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_tss_proto_rawDescOnce sync.Once
	file_tss_proto_rawDescData = file_tss_proto_rawDesc
)

func file_tss_proto_rawDescGZIP() []byte {
	file_tss_proto_rawDescOnce.Do(func() {
		file_tss_proto_rawDescData = protoimpl.X.CompressGZIP(file_tss_proto_rawDescData)
	})
	return file_tss_proto_rawDescData
}

var file_tss_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_tss_proto_msgTypes = make([]protoimpl.MessageInfo, 26)
var file_tss_proto_goTypes = []interface{}{
	(KeyStatus)(0),                  // 0: tss.KeyStatus
	(*PartyID)(nil),                 // 1: tss.PartyID
	(*KeyData)(nil),                 // 2: tss.KeyData
	(*KeyGenPrepareMsg)(nil),        // 3: tss.KeyGenPrepareMsg
	(*KeyGenReadyMsg)(nil),          // 4: tss.KeyGenReadyMsg
	(*KeyGenStartMsg)(nil),          // 5: tss.KeyGenStartMsg
	(*KeyGenFinishMsg)(nil),         // 6: tss.KeyGenFinishMsg
	(*KeySignPrepareMsg)(nil),       // 7: tss.KeySignPrepareMsg
	(*KeySignReadyMsg)(nil),         // 8: tss.KeySignReadyMsg
	(*KeySignStartMsg)(nil),         // 9: tss.KeySignStartMsg
	(*KeySignCancelMsg)(nil),        // 10: tss.KeySignCancelMsg
	(*KeySignFinishMsg)(nil),        // 11: tss.KeySignFinishMsg
	(*ProcessUpdateMsg)(nil),        // 12: tss.ProcessUpdateMsg
	(*ProcessErrorMsg)(nil),         // 13: tss.ProcessErrorMsg
	(*TssP2PMsg)(nil),               // 14: tss.TssP2PMsg
	(*GetLocalPartyIdRequest)(nil),  // 15: tss.GetLocalPartyIdRequest
	(*GetLocalPartyIdResponse)(nil), // 16: tss.GetLocalPartyIdResponse
	(*GetKeyRequest)(nil),           // 17: tss.GetKeyRequest
	(*GetKeyResponse)(nil),          // 18: tss.GetKeyResponse
	(*KeyGenRequest)(nil),           // 19: tss.KeyGenRequest
	(*KeyGenResponse)(nil),          // 20: tss.KeyGenResponse
	(*KeySignRequest)(nil),          // 21: tss.KeySignRequest
	(*KeySignResponse)(nil),         // 22: tss.KeySignResponse
	(*KeyDeleteRequest)(nil),        // 23: tss.KeyDeleteRequest
	(*KeyDeleteResponse)(nil),       // 24: tss.KeyDeleteResponse
	(*VerifySignatureRequest)(nil),  // 25: tss.VerifySignatureRequest
	(*VerifySignatureResponse)(nil), // 26: tss.VerifySignatureResponse
	(*timestamppb.Timestamp)(nil),   // 27: google.protobuf.Timestamp
}
var file_tss_proto_depIdxs = []int32{
	1,  // 0: tss.KeyData.all_party_id:type_name -> tss.PartyID
	0,  // 1: tss.KeyData.status:type_name -> tss.KeyStatus
	27, // 2: tss.KeyData.created_time:type_name -> google.protobuf.Timestamp
	27, // 3: tss.KeyData.updated_time:type_name -> google.protobuf.Timestamp
	1,  // 4: tss.KeyGenPrepareMsg.all_party_id:type_name -> tss.PartyID
	27, // 5: tss.KeyGenPrepareMsg.deadline:type_name -> google.protobuf.Timestamp
	27, // 6: tss.KeySignPrepareMsg.deadline:type_name -> google.protobuf.Timestamp
	1,  // 7: tss.KeySignStartMsg.sign_party_id:type_name -> tss.PartyID
	3,  // 8: tss.TssP2PMsg.key_gen_prepare_msg:type_name -> tss.KeyGenPrepareMsg
	4,  // 9: tss.TssP2PMsg.key_gen_ready_msg:type_name -> tss.KeyGenReadyMsg
	5,  // 10: tss.TssP2PMsg.key_gen_start_msg:type_name -> tss.KeyGenStartMsg
	6,  // 11: tss.TssP2PMsg.key_gen_finish_msg:type_name -> tss.KeyGenFinishMsg
	7,  // 12: tss.TssP2PMsg.key_sign_prepare_msg:type_name -> tss.KeySignPrepareMsg
	8,  // 13: tss.TssP2PMsg.key_sign_ready_msg:type_name -> tss.KeySignReadyMsg
	9,  // 14: tss.TssP2PMsg.key_sign_start_msg:type_name -> tss.KeySignStartMsg
	10, // 15: tss.TssP2PMsg.key_sign_cancel_msg:type_name -> tss.KeySignCancelMsg
	11, // 16: tss.TssP2PMsg.key_sign_finish_msg:type_name -> tss.KeySignFinishMsg
	12, // 17: tss.TssP2PMsg.process_update_msg:type_name -> tss.ProcessUpdateMsg
	13, // 18: tss.TssP2PMsg.process_error_msg:type_name -> tss.ProcessErrorMsg
	1,  // 19: tss.GetLocalPartyIdResponse.party_id:type_name -> tss.PartyID
	1,  // 20: tss.GetKeyResponse.all_party_id:type_name -> tss.PartyID
	0,  // 21: tss.GetKeyResponse.status:type_name -> tss.KeyStatus
	1,  // 22: tss.KeyGenRequest.all_party_id:type_name -> tss.PartyID
	15, // 23: tss.TssService.GetLocalPartyId:input_type -> tss.GetLocalPartyIdRequest
	17, // 24: tss.TssService.GetKey:input_type -> tss.GetKeyRequest
	19, // 25: tss.TssService.KeyGen:input_type -> tss.KeyGenRequest
	21, // 26: tss.TssService.KeySign:input_type -> tss.KeySignRequest
	23, // 27: tss.TssService.KeyDelete:input_type -> tss.KeyDeleteRequest
	25, // 28: tss.TssService.VerifySignature:input_type -> tss.VerifySignatureRequest
	16, // 29: tss.TssService.GetLocalPartyId:output_type -> tss.GetLocalPartyIdResponse
	18, // 30: tss.TssService.GetKey:output_type -> tss.GetKeyResponse
	20, // 31: tss.TssService.KeyGen:output_type -> tss.KeyGenResponse
	22, // 32: tss.TssService.KeySign:output_type -> tss.KeySignResponse
	24, // 33: tss.TssService.KeyDelete:output_type -> tss.KeyDeleteResponse
	26, // 34: tss.TssService.VerifySignature:output_type -> tss.VerifySignatureResponse
	29, // [29:35] is the sub-list for method output_type
	23, // [23:29] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_tss_proto_init() }
func file_tss_proto_init() {
	if File_tss_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tss_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PartyID); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tss_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tss_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyGenPrepareMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tss_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyGenReadyMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tss_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyGenStartMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tss_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyGenFinishMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tss_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeySignPrepareMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tss_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeySignReadyMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tss_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeySignStartMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tss_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeySignCancelMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tss_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeySignFinishMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tss_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessUpdateMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tss_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcessErrorMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tss_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TssP2PMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tss_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLocalPartyIdRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tss_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetLocalPartyIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tss_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tss_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetKeyResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tss_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyGenRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tss_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyGenResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tss_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeySignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tss_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeySignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tss_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyDeleteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tss_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyDeleteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tss_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifySignatureRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tss_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VerifySignatureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_tss_proto_msgTypes[13].OneofWrappers = []interface{}{
		(*TssP2PMsg_KeyGenPrepareMsg)(nil),
		(*TssP2PMsg_KeyGenReadyMsg)(nil),
		(*TssP2PMsg_KeyGenStartMsg)(nil),
		(*TssP2PMsg_KeyGenFinishMsg)(nil),
		(*TssP2PMsg_KeySignPrepareMsg)(nil),
		(*TssP2PMsg_KeySignReadyMsg)(nil),
		(*TssP2PMsg_KeySignStartMsg)(nil),
		(*TssP2PMsg_KeySignCancelMsg)(nil),
		(*TssP2PMsg_KeySignFinishMsg)(nil),
		(*TssP2PMsg_ProcessUpdateMsg)(nil),
		(*TssP2PMsg_ProcessErrorMsg)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tss_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   26,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_tss_proto_goTypes,
		DependencyIndexes: file_tss_proto_depIdxs,
		EnumInfos:         file_tss_proto_enumTypes,
		MessageInfos:      file_tss_proto_msgTypes,
	}.Build()
	File_tss_proto = out.File
	file_tss_proto_rawDesc = nil
	file_tss_proto_goTypes = nil
	file_tss_proto_depIdxs = nil
}
